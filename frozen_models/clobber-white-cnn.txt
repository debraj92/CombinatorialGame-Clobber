node {
  name: "inputs"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 40
        }
        dim {
          size: 2
        }
      }
    }
  }
}
node {
  name: "sequential_1/conv1d_3/Conv1D/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -3
      }
    }
  }
}
node {
  name: "sequential_1/conv1d_3/Conv1D/ExpandDims"
  op: "ExpandDims"
  input: "inputs"
  input: "sequential_1/conv1d_3/Conv1D/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequential_1/conv1d_3/Conv1D/ExpandDims_1/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 7
          }
          dim {
            size: 2
          }
          dim {
            size: 16
          }
        }
        tensor_content: "3\362,\277\352)\274\276\006h\305>\026L\202>jw\340\274s\276*\276N\005\210;~3\033\276G\377B\277\204\364\304>h\207\010\276n\346\310>\266G\001\277\276s+\276\276\364\375\275U=\343\275\006\212)\277\242\341\342>\221@\323\276,g\013\277\377\367\343\274k\202\240<3\232R=\t#\360>\0302\236\276\276\303p>\026\240\023?\2534\322\276\017\325\032\277\204\032\201>@K*\277[\332j>\314\334\312\276\315&\n?\206A\003\276\301O8?\330.\232>\254=f\277\322\230\002\277\322\373\270\276R\336\254\276X~\302>\352Z\021?\2674B\276g\033{\276M\350\034?\215\210\220>\304H\345\276\006\'l>\026\250\230=qR:?g\345L>\347K\r\2778\273\256\276s\320\033\277\324a\352>%\240\301>h\222R\276V\003]\276\246\303C?\037\255\365>\352\257\004\273rK\342\276Uc\324>\275\001\025\277\231C\032\277\302h\243>\257\310,>\232< \276\361}#\277\241\004\347>7\342\321>\324\223\223>x\276\240>\"\367\202\276\350\364\265>\002\177*?\336RL;\340\303 \275\263\363\026\277\226n\330=\025\206\367=\274L\004\277e{\331\275_\3349?\177]\221>\225V\203\276H\"\240\276;\300\'\275\264\254\303>\372[\316\276\315[\225\276\251\254!\276\0376\371>\"w\006\277)KD>]\034\261\275\"\345\330=\036\250\311\274\252\"\223\276.\333\247>\212V\031\276\204\2446\276I\274\'\276\330\237&?\376\367\253\274\020o\013==\346\336\274\345\264(?k\230\324=\375\317\256;\216\220\311\275w\263@\274\215*R\275\324~\215\275\314\0241>\305\026\250\276\304\230\236>\236\017\003?\332\356m\276\246O6>\030-\306<=M\357=_\243\007>\345\014{>\262\2774\277?\t\304\275$\211\003>\266$8=\246\013\231\275\2737t=$\273.\277\020,\244\274\313Y\003\276\021\014+\277\303C\255<0m5>\240\340\301=E\336\271\274}Q\201=\034(\322=\002\021\360\274O`\254>\353%\215\276\3371\036>\375\330\326<=\240\221=\355\"!\276\342 \343=&\301f>\0163s\276\277ff=\240\014\022\277o\033\271<&q\335\274#\231\260\274b\251|>T\030\324\274%\330v>\360\362\305\275L\032\260=\207\356\'=R\234,=\271[$=\301\237\r>!\311A\277\336\356\274=&\014\035\2758C\236\275!\233\313<\330\361\025=\303\270]<x\304\215\276\247\032i;\360\246\214<\220uQ\273\227g\204<\321\222\020<\243\206\342<\324G;<\337\365\377\272\026\257\352=\202%W>\372\201R<\307`\261\274\244\tb\274\340=\205=7\264`\274\002\331}\276\317\352\033\274\270\031\321\275\324\271R<\361Q\377<\021<\203<+\0076\274\234\3138\274\350\234\201\274\255o_\277\275\020\034\276\310\031!=\244\013\236\275R#\263;\230\360\007<\363\020\020<\272\376&<\001\333\252</F|\273\340\2647\274\312\037\255\275\000\351#;\337+l\274;\266\370\274\213\326\001\275t\033\004\276j\226\023>.\334\010=&D\001;K+a<\261\r\362<w&S<\266\200\375<\305\310j\274\335\002\224\275\330\301\001\274"
      }
    }
  }
}
node {
  name: "sequential_1/conv1d_3/Conv1D/ExpandDims_1/ReadVariableOp"
  op: "Identity"
  input: "sequential_1/conv1d_3/Conv1D/ExpandDims_1/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential_1/conv1d_3/Conv1D/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequential_1/conv1d_3/Conv1D/ExpandDims_1"
  op: "ExpandDims"
  input: "sequential_1/conv1d_3/Conv1D/ExpandDims_1/ReadVariableOp"
  input: "sequential_1/conv1d_3/Conv1D/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequential_1/conv1d_3/Conv1D"
  op: "Conv2D"
  input: "sequential_1/conv1d_3/Conv1D/ExpandDims"
  input: "sequential_1/conv1d_3/Conv1D/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "sequential_1/conv1d_3/Conv1D/Squeeze"
  op: "Squeeze"
  input: "sequential_1/conv1d_3/Conv1D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: -3
      }
    }
  }
}
node {
  name: "sequential_1/conv1d_3/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        tensor_content: "R\354\025\274g6#\277\3444P\277\007q%\277\372XW\277\224\024B\276\345C3\277\271\346u\277\205QT\277\212m\\\277lAI\277^uh\277\233\313\270\277\221`2\277p\016\037\274\332\373\265\276"
      }
    }
  }
}
node {
  name: "sequential_1/conv1d_3/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "sequential_1/conv1d_3/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential_1/conv1d_3/BiasAdd"
  op: "BiasAdd"
  input: "sequential_1/conv1d_3/Conv1D/Squeeze"
  input: "sequential_1/conv1d_3/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "sequential_1/conv1d_3/Relu"
  op: "Relu"
  input: "sequential_1/conv1d_3/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential_1/dropout_1/Identity"
  op: "Identity"
  input: "sequential_1/conv1d_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential_1/max_pooling1d_3/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "sequential_1/max_pooling1d_3/ExpandDims"
  op: "ExpandDims"
  input: "sequential_1/dropout_1/Identity"
  input: "sequential_1/max_pooling1d_3/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequential_1/max_pooling1d_3/MaxPool"
  op: "MaxPool"
  input: "sequential_1/max_pooling1d_3/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "sequential_1/max_pooling1d_3/Squeeze"
  op: "Squeeze"
  input: "sequential_1/max_pooling1d_3/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "sequential_1/conv1d_4/Conv1D/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -3
      }
    }
  }
}
node {
  name: "sequential_1/conv1d_4/Conv1D/ExpandDims"
  op: "ExpandDims"
  input: "sequential_1/max_pooling1d_3/Squeeze"
  input: "sequential_1/conv1d_4/Conv1D/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequential_1/conv1d_4/Conv1D/ExpandDims_1/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
        tensor_content: "\357C\270\276S\312\353\276m9\253\275\311\300W>\010\2412\276\252\354\235\276\277\327\212\276H\225\243\276)\262\">%\007\326>i9\033\275=\003\355\277\225\335 \277\3325j=V\022\220>\374\241\274>>\341\220>\276\270\300>\273\350J?\272\327\025\300<\021b\300Z\313:?(\226E?\032\016\005?h\371\321>\013\220\217?Z\242\264=h\'\335=j\226\223<.\013]\274\270\256\203\300\016\225\342\275\250]\036>\210\206\232>8\241\004?\260\232\033\277\316M\372\277a\"\347?Mcu?\270*\332=\354]\305\272\022(;\276\332\266\266\275n\030z>V\306E\276\203)\300=\377e\027\277Ej\230\276\2236e>\034\r\200>D#\000?H\035\340\276\313\370\325>\246\023\303>R\231>?\026<\205>J\253h<\335A\366\276I\206b\276\245\334D>:\"=>k\270F\277\213>\217>\341\220W\3008[\201?A\303\215?\306\325\351\275J\345\214\2766\035\025\276\363\n|=\257\254/\300@\003\026\300T\206\204?\rf8\277\212\252t<kk\232\272k\236\270=\347{\325=\363S\027\2774\261\203\275<\313\177>\216\256\275\275N\267\323=\230wI\277\tDJ\300\272\334\305>\3008\262\275\365#&?O\\\215>\354\342\350>\264\262\266?\241N+\300\253!i\277u\274V?#\312{?D\213\365>\335pl@\255 U\276\002F\013?\206\013~\277\3402\033\300jrO>\346Mm\300\357\034\006@2\035\226>\001I\340>$\260\276>6\240\235\276\264h\247\277\243^\321>\033N5?k\312\216>.\240\310\276\022\370\"\276\010\237\351\273Q\205@>\313\303\003\276n\231\301=\234\276\302=(\341z\276\036o\201\276X=\003\276\3604<\275n\345\202=\341\241\343<\322H\251\276\035T\007?\264\324\254\275\247\371/\277\236\360\206\275M\340\260<\216!i>\"T\205\275\215\232\251\274\347X|\277\344t\374\274\335\206<\2767\245\255>T}\255>\326\310\217>\355\353\326>\300\245\312<\010TM>\0255\373=\002I>>\303\3529>\316\r\362=\311\315`\276hC\274\277\307\367W?7\220\264>%u\372>\274kc\276\036E\313\276\301\276|=\003hi={\220\003>\266\324\261\275\240mV\277f\211\207=\201L\027\274\366\364\007=H\316\315>2p\037\276=62\277:y\035?\257\2135>\034\300_>P[\206\276\034\231\343=,\357L=\200\205~>]\237\343\275\220a\234<1\315\366\276\263\252r\276\000\302\364>\334\3413\277\031\035o\276\216{\220\276F\234I>\256m\220>0}\031?\271\223\336=\364\000\321>40\247>M\t\"\276\354z\032<\031\332\250>`\032\227=\355\351a=\034\325\316>\237\224=\277\325\371\277>\224\300\014>\010\360\001>\031K=\275l\026C\276\267\301\335\277\333/S\276t3\002?aT+>d\0303>\230\205\215>0=\007>4\363\215\275\235\013\267\276?\024\316</\\\205>}x\217>\212\240\225<\232\200\020\275*\350\027? U\345=\306e\333>\031\343\313>\330\366\211>\366\331A>\246\264@\277\320\202>\276\315\357\020\277\260\350\246>.\354\256>En\307>or}@n\\\301=%\207\231>\027\036\240\277\261\311\010\300\326^i\276\241Q!\277\014x\216\277\307\307%>\312\021\232=\353\337\003\274M\020q=\205-\316>#[\007?p\2206>\270\255\223>\256A\t\277\370[\010\276\351\211\261\273s\331\033>\257\2442\275r\207\340= \266\315\276e*\320\274\220\257^>6\030\221>\3730k\275\271!\215=\221\273\226>\337yZ\275\025\305\261=4\017\225>\313.4\276\310E\266=\324p*\275\310\334\311>\000\373\315=\313~\353=\245\341\326=ua\321=\010\022\037\275W\252Y\276>t\261=\033\242\304\275\337\357_>\333\242W>;\004\204>*\366\222>\255\207O>\025v\250\275N\324\341>\332[\213\275NTG\274\230H\007?8\020,>\332Y\334>\'\370\220<EE\230\273ie\023=\240\364\240>T[ >\367\020\204<A\360\325\276\001\342\n>\332\322\003?\367\"\177\276\034\320C?\2003\215\275j_[=9\266\n\276\343L\263\274T\000\021>Pl\200=\341\034\267=\027\"\342\275#\277\242>Z\323\377=Q\316\233=\303\032\344\276\264\353{=\275s\340>\035Z\003\277r\255\235>NV(\277\236\306\316>\305t!\276\006\267\257=-\273\251\274\350&\n?Vu6\275\016J\217\276\341\177I\276\324X\226>\330u\365=\355#c\276\034~\017?\"%\307>c!Q\276\2275\356\275\303\027:?\233\177\003>\326\r\002\273\003\305\010\276\254Q\231=_\327Y>\271q2?\004\222\216=\316o\272>\264<9>7\211C=\353l\356\275\237\247x=`t%>\261\263\225\275\255\231\242\275/\223\000\276\311\203\315>$\350\245>\306P\006=X[v>\343\333\212>\017Y\210\276\022&\365>\203\266\362\274\246\354\027>@\317\375\275x\246\005>\037`v>\245<\005@\246\236\035=\344\330\327?2\351\210\276\'\331b>\243\356G?DA\262=*\013\004\300\2313A>\"\'\231\276\365\344\000?@J\'\275ro\234>\010+\014>\006\332:>\2208\233>e\2122\276j\272z>\335\364\323\275\214\022\300>\225\204\033>1\330-=\200\232\256<\325\3453>\320d\'\276\3661\346=\272\200\223=\307\206\\>\235\333\252>~.\004\276\345\027\025\277\343\327\316>\210\357o<\2530y\275\371\231\036\276\020\224\354>A&\217>n\014\241=U\307\233=z`\214>\n\177J>:\3744\276J\0053\273\323\204*\276\020\253S>\244\366e\277\210\362\020>9\265\223>i\345\274>-\307I\275D\\\016?\376\301\017\2755:\274>?\212f\276\334\303S>z\216\214>i\307\230=1\232Q\276\2353c<\304\317\331>\001|\257>\000\272\217=~\3432\276\024\261\275>\016\265\337>\001\240\254\275>\241\013?\232\265\327<\270!\371>\256\334\032\277-y\035\275\014\r\223>y*\006\277#m\324>\327\331l\275)\341\307>6`\231>\370\375\206>J\031\013\276Y\024\243>\376\313\234>\334\3622\277\200\"\317>\326\217J\276q\352\347>$\001\227=\354,$\276\r\262\241;{\031\340>\236+\"\277\205l\200\274\205\341b\276\313\373\267>_\215\260\276\017\007\246\277\026\"\006?\226\274F\276\232\305u=\217\245\210\275R\210\246?\006\352\325>\260}\210\276\216~\030?W\232\310>\337`\350\275f\377\215?\305d\222=\030\217q>\324>\257>\007\027\200>\3131\001?a\244\375=M\263\027>\263/`\276\177\007\367>L\316\240\276\006\332\355>\365i\327\275\202\242Y\275\031R2>\300\236\247>\363\337c\275\\\035\203>\326\016m\275\326>\332>\324\n\027\277k\3714>\361\275?>\223\256\236?\330\331\206?\273\032\301?\343\204\350\276\237\177??v\276W>\003D\324\276\361\333\364\277\377}\301>\204\335e\276\023\220;>]?}\274\374k\311>\360\216Y\277\033md>\022NU>3\\\003\276\277\001\016>\3578\231\275\276\227\315>\234^\314>O\'\017>\261>;=\312\036\302>\023m<\276\2541\310;\270\342\265<x\366\241>sY\336>(\203\223=\223io={\240\006?\345\326\024>a\212\230>\212\023\211>)Qw?\370s\005?\267\311\036>zy\262>y\264\334>\342K\362>\034\355E\277\325\3332>j\035^\275\236\242\273>\'\363\302\274\362\334\007>E\372\200>\031\3135?\361\273\031\277\215&V?\224\232\351=k#=?Q(\374==\023\374=\366\314\023>\235\203\217>5m\374>\343#6=\260\375W?\322\275\010?O\367|=Y}!?\2163\032?R\325&?6\325\315\276v\3706?\211\205\014\276L\277a?\276\335\304>&W\036\276\222\360\214>\002uU\273\264a\252>\375\266\177=/f\246?\177\255\032? \212\327=\3606\006?\303\220\374>T\350\252>\306\006U\276\272<w\275\347\013F?\343\264\037>\243\216b>\216?\216\276\207\230\325\275j\034,\276L,\374>\363\253\240\274Ys\313\276\343<a>\261\261\236\275^m\017\277\371\317\033?Q\246`\276\271\301>\276s\007\371=\016\237T>\300\001\273>P\177\275>\256\217~<SY\342=\n\237\201?\256\355\025\277\301a\352>\353\001\354\275\221\355J<\'5\324\275\366\233\014>\353\010c\276.b\310>8\274\374\276Hq\375>7R\252=\255\263\021?\375\225\217>D\023\315\275\261\'W>\251\263\024?S\366\257\276\25407?\007@\014>\351\301U?\246\262:>\034\310.>\377\301%>|\',?\205?\310\275\000\367\024?T\3201\276\007\346[\276W\026\212?X>\211\275n\335\256>\200| ?@`\331\276s~\022?}F\023>B\365\261>\001}\217\275\010\206\361=}\014U>\247\331$>e\005\352>\217R&>\234\003\213?\021\256\'?\374\017U>\235\247\026?\256\007 ?\306\003\\>O\311\264>ATe>}\t.?\336\024\026?\n\312\037\276\332W+?}\237,?"
      }
    }
  }
}
node {
  name: "sequential_1/conv1d_4/Conv1D/ExpandDims_1/ReadVariableOp"
  op: "Identity"
  input: "sequential_1/conv1d_4/Conv1D/ExpandDims_1/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential_1/conv1d_4/Conv1D/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequential_1/conv1d_4/Conv1D/ExpandDims_1"
  op: "ExpandDims"
  input: "sequential_1/conv1d_4/Conv1D/ExpandDims_1/ReadVariableOp"
  input: "sequential_1/conv1d_4/Conv1D/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequential_1/conv1d_4/Conv1D"
  op: "Conv2D"
  input: "sequential_1/conv1d_4/Conv1D/ExpandDims"
  input: "sequential_1/conv1d_4/Conv1D/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "sequential_1/conv1d_4/Conv1D/Squeeze"
  op: "Squeeze"
  input: "sequential_1/conv1d_4/Conv1D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: -3
      }
    }
  }
}
node {
  name: "sequential_1/conv1d_4/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        tensor_content: "t\331\277;\236\341\206\276\227\276\245\275\"/\257:\330 \235=Z\356\246\275^/\206\276\345\320\035\274"
      }
    }
  }
}
node {
  name: "sequential_1/conv1d_4/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "sequential_1/conv1d_4/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential_1/conv1d_4/BiasAdd"
  op: "BiasAdd"
  input: "sequential_1/conv1d_4/Conv1D/Squeeze"
  input: "sequential_1/conv1d_4/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "sequential_1/conv1d_4/Relu"
  op: "Relu"
  input: "sequential_1/conv1d_4/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential_1/max_pooling1d_4/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "sequential_1/max_pooling1d_4/ExpandDims"
  op: "ExpandDims"
  input: "sequential_1/conv1d_4/Relu"
  input: "sequential_1/max_pooling1d_4/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequential_1/max_pooling1d_4/MaxPool"
  op: "MaxPool"
  input: "sequential_1/max_pooling1d_4/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "sequential_1/max_pooling1d_4/Squeeze"
  op: "Squeeze"
  input: "sequential_1/max_pooling1d_4/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "sequential_1/conv1d_5/Conv1D/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -3
      }
    }
  }
}
node {
  name: "sequential_1/conv1d_5/Conv1D/ExpandDims"
  op: "ExpandDims"
  input: "sequential_1/max_pooling1d_4/Squeeze"
  input: "sequential_1/conv1d_5/Conv1D/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequential_1/conv1d_5/Conv1D/ExpandDims_1/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
        tensor_content: "\353\341 >\003\340\'?\337\257<?\216\325\213?\211\342\221>\366\363G\276\257\3404\276M\351L?\207\177\217\277U\267\024\274\301M%\277rn\255=\026[\017?\2319\234\2747r\206=\213\333\236?%\001\337>\3659x\276 ;\231?I\301\275\276a\204=?\002*\276>\230/_\276\360\342\177>o\256H\277\312\237\373\276\372\200\021\277f\"\034\277a\210\010\277\024\226\231?j\257\022>\376\311\250\276\326\210\014\276FB\010?e&\355>\340\376\351>\033\335\262>\217\266\365\275\254Q=\276n\313\213>\351\304$>\361V0?#\223\002\277\314\212!>QP\030\277\331\253\362=\034W\207>\276\235,?Y\377\250>\212\376`=\276\t\253>\003\276d\276\330\000\341>^\327*?\260}\247\2754\351S\275\311\337&>\203\311\004\277\226/\210\277\020D\304\276\023HX>\321oz=\302\005\244>=\215\035>\230\005J>\304\340\246\276v\331F\275?\257\006>\014fW=\372\360\226<\371\263H\276\341d\260>[\325F=\026;\203?J\311\025\277\237]H>\216Dx\276\031\2524>\016~\204\276\007\nX>q&2\276K\344\250>\375\337\010>>*7?\204\316\272=\177\354!?,C\243\275\204\357e>)\330\034?\345\271\272>\322\333\276\276\204\367G\277\366\017\307>\372\027\323\2759\365\265\275@\001a<"
      }
    }
  }
}
node {
  name: "sequential_1/conv1d_5/Conv1D/ExpandDims_1/ReadVariableOp"
  op: "Identity"
  input: "sequential_1/conv1d_5/Conv1D/ExpandDims_1/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential_1/conv1d_5/Conv1D/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequential_1/conv1d_5/Conv1D/ExpandDims_1"
  op: "ExpandDims"
  input: "sequential_1/conv1d_5/Conv1D/ExpandDims_1/ReadVariableOp"
  input: "sequential_1/conv1d_5/Conv1D/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequential_1/conv1d_5/Conv1D"
  op: "Conv2D"
  input: "sequential_1/conv1d_5/Conv1D/ExpandDims"
  input: "sequential_1/conv1d_5/Conv1D/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "sequential_1/conv1d_5/Conv1D/Squeeze"
  op: "Squeeze"
  input: "sequential_1/conv1d_5/Conv1D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: -3
      }
    }
  }
}
node {
  name: "sequential_1/conv1d_5/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\252\\8>\262\270\004\275\324\302\261\275\242\034\t="
      }
    }
  }
}
node {
  name: "sequential_1/conv1d_5/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "sequential_1/conv1d_5/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential_1/conv1d_5/BiasAdd"
  op: "BiasAdd"
  input: "sequential_1/conv1d_5/Conv1D/Squeeze"
  input: "sequential_1/conv1d_5/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "sequential_1/conv1d_5/Relu"
  op: "Relu"
  input: "sequential_1/conv1d_5/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential_1/max_pooling1d_5/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "sequential_1/max_pooling1d_5/ExpandDims"
  op: "ExpandDims"
  input: "sequential_1/conv1d_5/Relu"
  input: "sequential_1/max_pooling1d_5/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequential_1/max_pooling1d_5/MaxPool"
  op: "MaxPool"
  input: "sequential_1/max_pooling1d_5/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "sequential_1/max_pooling1d_5/Squeeze"
  op: "Squeeze"
  input: "sequential_1/max_pooling1d_5/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "sequential_1/flatten_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\010\000\000\000"
      }
    }
  }
}
node {
  name: "sequential_1/flatten_1/Reshape"
  op: "Reshape"
  input: "sequential_1/max_pooling1d_5/Squeeze"
  input: "sequential_1/flatten_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequential_1/Dense_1/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 32
          }
        }
        tensor_content: "\204\335\352\275\310\377\214>4\220[=\027\231v=\271*#\277\207\225j\275]b\225>\037\3335>\000?e>.)\020<\254\017\313>\023\244k?\360k\010?2(\271=\276\271B\275\027\312\333>\373\311\t\300[^F> \353\231?hz\245?\007\263\245>\r4\007>xw6?\t~\235?V\325\276=\345l\350\276F\242\307>\321\263f\276N#\t\276\000w\263\276\337\375\005?\365\364)\277\223\224-\277\3401\337={\370%\2755\332\305\276\326\246\036=\"\271Q<2\316\220\277;\027T\2771\220\200\277\240\316i\277\3407\212\277/\224W\276\260\236\207\277\243pY>A\375\315\275\322rb\2776\262\177>IV\177\276\003\310\262\276\253\035\336\276\343\"\266\277\203\326l\275\347\202-\277S\274\017\277\324\344\205\277\357\367d>h\373p\277\007\357%\275\2073\230\276>\344R>\330\357Y\277\263]\231>\0256,?\300jh\277g\003\337\275QO\216\275r\004\251\277\337\367\027\277^\335\t?\206\273G?xP@?~\260K?.\n\037?\233[\232>\317\227\'?k\361\215\277\034Y\230=>\255>?\312\227\235\277>\3215\277\032\276\265\275\3464`>\007\345\266>\212~(\277nPS>\307\276a\277 \016h?\363aH\277\032\203\033?^\2574\276\314j\'\276\315}%?pv\007?{\342-\276\000\361R=E`\265>-\205\003>\364\317Q\275p\031>?\267\241[\277\217\300f\275D_!\276\214\324\013\276E\030\372\275\234\355\'\276\346\0273?\r\207G\276\033r\341<\334\360\272<\327\310L\276]7\331>\034_&?ZbF?\t\245\016?\210_;=S\376\034>m\276E?\0353v\276\342\256O\2764#y\277\314R\001\276\343\364\314\276[\2619\276\271\206\273\276\314*3\276\010[\355\274\3359\312>2\352(\277|\001\332\276\373]\263\275\235\360\373=\265\031\222?:\304\177>|t\261\274n\277\260>\325\326\277>z\312\262=\035g\000\277<\200~>\0330\206\276\343\226/\276\243\236I>2\262W>g\372\225>\233\270\020\276,s\275<\222_\276\276\220\247\314\276\313]\031>\332\260\366>\366\211\206>B\223l?\275\304\312>\352\023B;i5l\276\202\217#?\233gT\274\r^\216\276\017\375\030\276\370\327\216>\005B\017\276\rN\030=%\231o\276\374q\212>\344\276\375>m!\251=\323\267\377=\374`\372=\206\253{=|\277<\277]\021\325\276\347\274O\277\031\330;\276\360\267\326\276m2G>\212^c\276\215\230\353\276\371{\031\277\317\205d?\003\3339\275\213\021\234=\350C\376\275Ls\305=\321\266\212>m<\037\277cJ\'\276\264\013l>\"7d>@\301\365\275B\017:\300}\265e>\266\001\275\277\340k\303\276\242\317s\276\270\215\210\277\234\223q\275<\335\240\275\244\364\210\276\034F\023\277\013 \334\276E\307g\276\344\r\200\276kZ\362\276\326\334\027\277\266\226\223\276\275\276\210\277V\251\346\276\323\020\247\276e\335\345>\220\310\233>\231W\317\274Cf\207\277\2059\332\276\261\307\033?\277\320\253\276\003\260=?;\002%\277\274\255\377\275\331(6>\033D\202>\026\305%\277D}\366=0J\365\275\231\242*>l*\252\276\201\361\212>\274f?>9\337\220>\030*\206\275n\356\204>F\362\035>\332\274\r=r(\300=\275\334%\277\026\270\334>f\252\031\275\\e?\275u\274 \276\036\255\273\273/\277\036>U\003\271\276\213}\014\277\r\252\336=\305q\357\276\306\\\243\276A#/\276L0\024>\227\344\021?kY\244>\244\225\t>\232\356%=&\232\241>\270\206t>4h!\275"
      }
    }
  }
}
node {
  name: "sequential_1/Dense_1/MatMul/ReadVariableOp"
  op: "Identity"
  input: "sequential_1/Dense_1/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential_1/Dense_1/MatMul"
  op: "MatMul"
  input: "sequential_1/flatten_1/Reshape"
  input: "sequential_1/Dense_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "sequential_1/Dense_1/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        tensor_content: "n\354\303>\361\324\016\2779\246\342\276\264\210\215\275\005\342`\276\333(\340>\202+\004=\362\271R>\331\312\207>nx\216>\304In>\354v\200\276f\371\266=n\305\364\2762%\324<\3565\201>\260\364 \276\374\354\357=LA\272>\345\310\373>\211\234\030=`\321\270\276\331\346\005>\241\3608?\262n\232>\210s\266>\314\220\204>v!_\275\2674\345\275F\241\376=\361\254]>_3\263\276"
      }
    }
  }
}
node {
  name: "sequential_1/Dense_1/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "sequential_1/Dense_1/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential_1/Dense_1/BiasAdd"
  op: "BiasAdd"
  input: "sequential_1/Dense_1/MatMul"
  input: "sequential_1/Dense_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "sequential_1/Dense_1/Relu"
  op: "Relu"
  input: "sequential_1/Dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential_1/Dense_2/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\017\260S?\232O\350\276\025\033\354\276\031\361\023\276\027S\365\274l\007\014\275\374}\t\275\257\256(>\260\007\236\276\222C\326<g\336\r?a\014\212\277>\247\236?\246\006U\2777o\304?\332\272l\277:\335\263?o\360\304\277\341z\234?\232\323\345\2772$\221?\273H\305\277\255(\226?\364\363+\277\001\315\311?\236\367\240\277\237]<=$\237\r?LP\002\276\027m\355\275!=\341?\033\311\255\277\\\t\010\277:B\001?\251\252\273\276ke\t?\242\217\223\277\035\224\032?3\232\213\277]\273$?2m\311?\213\310\367\277\204m,>\375\034\030>Q\005h?)\024\t\2777\031\330\277\363G\332?2\023\350?\324h\305\277\274\\\251>\370\327x\277\265\014\210?\005\351\007\277\277\324\220>\273\212\307>s\234\270\274;\255\332>6\260U=:\236\225\276\302\336b?R\\\212\277x|6?\250\341%\277"
      }
    }
  }
}
node {
  name: "sequential_1/Dense_2/MatMul/ReadVariableOp"
  op: "Identity"
  input: "sequential_1/Dense_2/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential_1/Dense_2/MatMul"
  op: "MatMul"
  input: "sequential_1/Dense_1/Relu"
  input: "sequential_1/Dense_2/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "sequential_1/Dense_2/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\207E`>UE`\276"
      }
    }
  }
}
node {
  name: "sequential_1/Dense_2/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "sequential_1/Dense_2/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential_1/Dense_2/BiasAdd"
  op: "BiasAdd"
  input: "sequential_1/Dense_2/MatMul"
  input: "sequential_1/Dense_2/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "sequential_1/Dense_2/Softmax"
  op: "Softmax"
  input: "sequential_1/Dense_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "NoOp"
  op: "NoOp"
  input: "^sequential_1/Dense_1/BiasAdd/ReadVariableOp"
  input: "^sequential_1/Dense_1/MatMul/ReadVariableOp"
  input: "^sequential_1/Dense_2/BiasAdd/ReadVariableOp"
  input: "^sequential_1/Dense_2/MatMul/ReadVariableOp"
  input: "^sequential_1/conv1d_3/BiasAdd/ReadVariableOp"
  input: "^sequential_1/conv1d_3/Conv1D/ExpandDims_1/ReadVariableOp"
  input: "^sequential_1/conv1d_4/BiasAdd/ReadVariableOp"
  input: "^sequential_1/conv1d_4/Conv1D/ExpandDims_1/ReadVariableOp"
  input: "^sequential_1/conv1d_5/BiasAdd/ReadVariableOp"
  input: "^sequential_1/conv1d_5/Conv1D/ExpandDims_1/ReadVariableOp"
  attr {
    key: "_acd_function_control_output"
    value {
      b: true
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "sequential_1/Dense_2/Softmax"
  input: "^NoOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 987
}
